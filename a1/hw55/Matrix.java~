/* Team Boba -- Kate Johnston, Bayle Smith-Salzberg, Anna Tolen
APCS1 pd10
HW55 -- Don't Think You Are. Know You Are.
2016-01-06 */
/*====================================
  class Matrix -- models a square matrix

  TASK: Implement methods below.
        Categorize runtime of each. 
        Test in your main method.
  ====================================*/ 

public class Matrix {

    //constant for default matrix size
    private final static int DEFAULT_SIZE = 2;

    private Object[][] matrix;


    //default constructor intializes a DEFAULT_SIZE*DEFAULT_SIZE matrix
    public Matrix( ) {
	matrix = new Object[DEFAULT_SIZE][DEFAULT_SIZE];
    }


    //constructor intializes an a*a matrix
    public Matrix( int a ) {
	matrix = new Object[a][a];	
    }


    //return size of this matrix, where size is 1 dimension
    private int size() {
	return matrix.length;
    }


    //return the item at the specified row & column   
    private Object get( int r, int c ) {
	return matrix[r][c];
    }


    //return true if this matrix slot is empty, false otherwise
    private boolean isEmpty( int r, int c ) {
	return matrix[r][c] == null;
    }


    //overwrite item at specified row and column with newVal
    //return old value
    private Object set( int r, int c, Object newVal ) {
	Object oldVal = matrix[r][c];
	matrix[r][c] = newVal;
	return oldVal;
    }

    //return String representation of this matrix
    // (make it look like a matrix)
    public String toString() {
	String retStr = "";
	for( int i = 0; i < matrix.length; i++ ) {
	    for( int c = 0; c < matrix[i].length; c++ ) {
		retStr += matrix[i][c] + " ";
	    }
	    retStr += "\n";
	}
	return retStr;
    }


    //override inherited equals method
    //criteria for equality: matrices have identical dimensions,
    // and identical values in each slot
    public boolean equals( Object rightSide ) {
	if( !(rightSide instanceof Matrix ) ) { return false; }
	
	else if( this.matrix.length != ((Matrix)rightSide).matrix.length || this.matrix[0].length != ((Matrix)rightSide).matrix[0].length ) {
	    return false;
	}
	
	else {
	    for( int i = 0; i < matrix.length; i++ ) {
		for( int j = 0; j < matrix.length; j++ ) {
		    if( this.get(i,j) == null && ((Matrix)rightSide).get(i,j) == null ) { } // pass if both are null -- avoids NullPointerException
		    else if( this.get(i,j) == null ^ ((Matrix)rightSide).get(i,j) == null ) { return false; }
		    else if( !( this.get(i,j).equals( ((Matrix)rightSide).get(i,j) ) )) { return false; }
		}
	    }
	    return true;
	}
    }

    //swap two columns of this matrix 
    //(0,0) is top left corner of matrix
    //row values increase going down
    //column value increase L-to-R
    public void swapColumns( int c1, int c2  ) {
	for( int i = 0; i < matrix.length; i++ ) {
	    set( i,c1, set(i,c2,matrix[i][c1]) );
	}
    }
    


    //swap two rows of this matrix 
    //(0,0) is top left corner of matrix
    //row values increase going down
    //column value increase L-to-R
    public void swapRows( int r1, int r2  ) {
	for( int i = 0; i < matrix[0].length; i++ ) {
	    set( r1,i,set(r2,i,matrix[r1][i]) );
	}
    }

    /*======================================================================    
    public boolean isFull() {
    }
    ======================================================================*/
    
    public Object[] getRow( int r ) {
	Object[] ret = new Object[matrix.length];
	for( int i = 0; i < matrix.length; i++ ) {
	    ret[i] = matrix[r][i];
	}
	return ret;
    }


    public Object[] setRow( int r, Object[] newRow ) {
	Object[] hold = getRow(r);
	for( int i = 0; i < matrix.length; i++ ) {
	    set(r,i,newRow[i]);
	}
	return hold;
    }

    public Object[] getCol( int c ) {
	Object[] ret = new Object[matrix[0].length];
	for( int i = 0; i < matrix[0].length; i++ ) {
	    ret[i] = matrix[i][c];
	}
	return ret;
    }

    
    public Object[] setCol( int c, Object[] newCol ) {
	Object[] hold = getCol(c);
	for( int i = 0; i < matrix[0].length; i++ ) {
	    set(i,c,newCol[i]);
	}
	return hold;
    }

    public void transpose() {
	
    }

    public boolean contains( Object o ) {
    }

   
    
    //main method for testing
    public static void main( String[] args ) {
	//constructor tests
	Matrix keanu = new Matrix();
	System.out.println( keanu ); //2x2 null matrix

	Matrix reeves = new Matrix(5);
	Matrix redPill = new Matrix(5);
	Matrix bluePill = new Matrix(5);
	System.out.println( reeves ); //5x5 null matrix

	//size(), get(), set()
	System.out.println( reeves.size() ); //5
	System.out.println( reeves.get(2,4) ); //null
	System.out.println( reeves.set(2,4,"$wagmoney") ); //null
	System.out.println( reeves.get(2,4) ); //"$wagmoney"

	//isEmpty()
	System.out.println( reeves.isEmpty(4,2) ); //true
	System.out.println( reeves.isEmpty(2,4) ); //false

	//equals()
	redPill.set(2,4,"$wagmoney");	
	
	System.out.println( reeves.equals( keanu ) ); //false
	System.out.println( reeves.equals( redPill ) ); //true
	System.out.println( reeves.equals( bluePill ) ); //false

	//swaps
	System.out.println( reeves );
	reeves.swapColumns(4,2);
	System.out.println( reeves );
	reeves.swapRows(2,4);
	System.out.println( reeves );

	//accs, muts for cols, rows
	System.out.println( reeves.getRow(4) );
    }

}//end class Matrix
