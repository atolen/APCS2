/*====================================
  class Matrix -- models a square matrix

  TASK: Implement methods below.
        Categorize runtime of each. 
        Test in your main method.
  ====================================*/ 

public class Matrix {

    //constant for default matrix size
    private final static int DEFAULT_SIZE = 2;

    private Object[][] matrix;


    //default constructor intializes a DEFAULT_SIZE*DEFAULT_SIZE matrix
    public Matrix( ) {
	matrix = new Object[DEFAULT_SIZE][DEFAULT_SIZE];
    }


    //constructor intializes an a*a matrix
    public Matrix( int a ) {
	matrix = new Object[a][a];	
    }


    //return size of this matrix, where size is 1 dimension
    private int size() {
	return matrix.length;
    }


    //return the item at the specified row & column   
    private Object get( int r, int c ) {
	return matrix[r][c];
    }


    //return true if this matrix slot is empty, false otherwise
    private boolean isEmpty( int r, int c ) {
	return matrix[r][c] == null;
    }


    //overwrite item at specified row and column with newVal
    //return old value
    private Object set( int r, int c, Object newVal ) {
	Object oldVal = matrix[r][c];
	matrix[r][c] = newVal;
	return oldVal;
    }

    //return String representation of this matrix
    // (make it look like a matrix)
    public String toString() {
	String retStr = "";
	for( int i = 0; i < matrix.length; i++ ) {
	    for( int c = 0; c < matrix[i].length; c++ ) {
		retStr += matrix[i][c] + " ";
	    }
	    retStr += "\n";
	}
	return retStr;
    }


    //override inherited equals method
    //criteria for equality: matrices have identical dimensions,
    // and identical values in each slot
    public boolean equals( Object rightSide ) {
	if( this.matrix.length != (Matrix)rightSide.matrix.length || this.matrix[0].length != (Matrix)rightSide.matrix[0].length ) {
	    return false;
	}
	else {
	    for( int i = 0; i < matrix.length; i++ ) {
		for( int j = 0; j < matrix[i].length; j++ ) {
		    if( !(this.matrix[i][j].equals( rightSide.matrix[i][j] )) ) { return false; }
		}
	    }
	}
	return true;
    }


    //swap two columns of this matrix 
    //(0,0) is top left corner of matrix
    //row values increase going down
    //column value increase L-to-R
    public void swapColumns( int c1, int c2  ) {
	for( int i = 0; i < matrix.length; i++ ) {
	    matrix.set( matrix[i][c1], matrix.set(matrix[i][c2],matrix[i][c1]) );
	}
    }
    
    /*======================================================================

    //swap two rows of this matrix 
    //(0,0) is top left corner of matrix
    //row values increase going down
    //column value increase L-to-R
    public void swapRows( int r1, int r2  ) {

    }

    ======================================================================*/
    //main method for testing
    public static void main( String[] args ) {
	//constructor tests
	Matrix keanu = new Matrix();
	System.out.println( keanu );

	Matrix reeves = new Matrix(5);
	Matrix redPill = new Matrix(5);
	redPill.set(2,4,"$wagmoney");
	Matrix bluePill = new Matrix(5);
	
	System.out.println( reeves );
	System.out.println( reeves.size() );
	System.out.println( reeves.get(2,4) );
	System.out.println( reeves.set(2,4,"$wagmoney") );
	System.out.println( reeves.get(2,4) );
	System.out.println( keanu.isEmpty(2,4) );
	System.out.println( reeves.isEmpty(2,4) );
	System.out.println( reeves.equals( keanu ) );
	System.out.println( reeves.equals( redPill ) );
	System.out.println( reeves.equals( bluePill ) );

	reeves.swap(4,2);
	System.out.println( reeves );
    }

}//end class Matrix
